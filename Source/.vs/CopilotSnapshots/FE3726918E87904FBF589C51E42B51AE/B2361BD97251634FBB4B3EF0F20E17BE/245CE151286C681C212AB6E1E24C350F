using LudeonTK;
using RimWorld;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.Profiling;
using Verse;
using Verse.Sound;

namespace GoreUponDismemberment
{
    public partial class GUDUtil
    {
        static string HeadTexturePath
        {
            get
            {
                return Path.Combine("Things", "Heads");
            }
        }

        private static readonly string headBurnedGraphicPath = "Things/Heads/Crisp/Crisp_Average_Skull";

        private static readonly string headCutGraphicPathFemale = "Things/Heads/Cut/Female_cut";

        private static readonly string headCutGraphicPathMale = "Things/Heads/Cut/Male_cut";

        private static readonly string headShrededGraphicPathMale = "Things/Heads/Shred/Male_boom";

        private static readonly string headShrededGraphicPathFemale = "Things/Heads/Shred/Female_boom";

        private static readonly string headShotPathMale = "Things/Heads/Shot/Male_shot";

        private static readonly string headShotPathFemale = "Things/Heads/Shot/Female_shot";

        public static Graphic FlyingHeadGraphic(Gender gender, Color skinColor, CompDeathRecorder.DeathCause cause, Shader shader, Pawn pawn = null)
        {
            bool flag = pawn != null && pawn.Drawer.renderer.renderTree.HeadGraphic != null;
            Graphic graphic;
            if (flag)
            {
                graphic = pawn.story.headType.GetGraphic(pawn, pawn.story.SkinColor);
            }
            else
            {
                string text;
                switch (cause)
                {
                    case CompDeathRecorder.DeathCause.Cut:
                        text = ((gender == Gender.Male) ? GUDUtil.headCutGraphicPathMale : GUDUtil.headCutGraphicPathFemale);
                        break;
                    case CompDeathRecorder.DeathCause.Flame:
                        text = GUDUtil.headBurnedGraphicPath;
                        break;
                    case CompDeathRecorder.DeathCause.Shred:
                        text = ((gender == Gender.Male) ? GUDUtil.headShrededGraphicPathMale : GUDUtil.headShrededGraphicPathFemale);
                        break;
                    case CompDeathRecorder.DeathCause.Shot:
                        text = ((gender == Gender.Male) ? GUDUtil.headShotPathMale : GUDUtil.headShotPathFemale);
                        break;
                    default:
                        return null;
                }
                graphic = GraphicDatabase.Get<Graphic_Multi>(text, shader, Vector2.one, skinColor);
            }
            return graphic;
        }

        public static Graphic GoredHeadGraphic(Pawn pawn, CompDeathRecorder.DeathCause cause, Shader shader)
        {
            bool flag = pawn.Drawer.renderer.CurRotDrawMode == RotDrawMode.Dessicated;
            string text;
            switch (cause)
            {
                case CompDeathRecorder.DeathCause.Cut:
                    {
                        bool flag2 = flag;
                        if (flag2)
                        {
                            return null;
                        }
                        text = ((pawn.gender == Gender.Male) ? GUDUtil.headCutGraphicPathMale : GUDUtil.headCutGraphicPathFemale);
                        break;
                    }
                case CompDeathRecorder.DeathCause.Flame:
                    text = GUDUtil.headBurnedGraphicPath;
                    break;
                case CompDeathRecorder.DeathCause.Shred:
                    {
                        bool flag3 = flag;
                        if (flag3)
                        {
                            return null;
                        }
                        text = ((pawn.gender == Gender.Male) ? GUDUtil.headShrededGraphicPathMale : GUDUtil.headShrededGraphicPathFemale);
                        break;
                    }
                case CompDeathRecorder.DeathCause.Shot:
                    {
                        bool flag4 = flag;
                        if (flag4)
                        {
                            return null;
                        }
                        text = ((pawn.gender == Gender.Male) ? GUDUtil.headShotPathMale : GUDUtil.headShotPathFemale);
                        break;
                    }
                default:
                    return null;
            }
            return GraphicDatabase.Get<Graphic_Multi>(text, shader, Vector2.one, pawn.story.SkinColor);
        }

        private static bool HasSpecialGoreForXenoType(Pawn pawn)
        {
            bool flag = !ModsConfig.BiotechActive;
            bool flag2;
            if (flag)
            {
                flag2 = false;
            }
            else
            {
                bool flag3 = pawn == null;
                if (flag3)
                {
                    flag2 = false;
                }
                else
                {
                    bool flag4 = pawn.genes == null;
                    if (flag4)
                    {
                        flag2 = false;
                    }
                    else
                    {
                        bool flag5 = pawn.genes.Xenotype == null;
                        flag2 = !flag5 && XenoGoreDictionary.dict.ContainsKey(pawn.genes.Xenotype);
                    }
                }
            }
            return flag2;
        }

        public static bool IsXenoBannedFromGore(XenotypeDef xenotypeDef)
        {
            bool flag = xenotypeDef == null;
            return !flag && XenoGoreDictionary.dict.ContainsKey(xenotypeDef) && XenoGoreDictionary.dict[xenotypeDef].disableCorpseVariety;
        }

        public static void MakeBrokenLimb(Pawn pawn)
        {
            bool flag = GUDUtil.HasSpecialGoreForXenoType(pawn);
            bool flag2 = flag;
            if (flag2)
            {
                GUDUtil.MakeBrokenLimbForAlien(pawn);
            }
            else
            {
                GUDUtil.MakeBrokenLimbForHuman(pawn);
            }
        }

        public static void MakeBrokenLimbForAlien(Pawn pawn)
        {
            ThingDef gore = XenoGoreDictionary.dict[pawn.genes.Xenotype].gore;
            bool flag = gore == null;
            if (!flag)
            {
                Thing thing = ThingMaker.MakeThing(gore, null);
                thing.stackCount = 1;
                thing.Rotation = Rot4.Random;
                GenPlace.TryPlaceThing(thing, pawn.Position, pawn.Map, ThingPlaceMode.Near, null, null, new Rot4?(Rot4.Random), 1);
                thing.SetForbidden(GoreUponDismembermentMod.settings.isForbidden, true);
            }
        }

        // Token: 0x06000011 RID: 17 RVA: 0x000024C0 File Offset: 0x000006C0
        [DebugAction("GUD", "MakeBrokenLimb", false, false, false, false, false, 0, false, actionType = DebugActionType.ToolMapForPawns)]
        public static void MakeBrokenLimbForHuman(Pawn pawn)
        {
            Thing thing = ThingMaker.MakeThing(GoreDefOf.Gore, null);
            thing.stackCount = 1;
            GenPlace.TryPlaceThing(thing, pawn.Position, pawn.Map, ThingPlaceMode.Near, null, null, new Rot4?(Rot4.Random), 1);
            thing.SetForbidden(GoreUponDismembermentMod.settings.isForbidden, true);
        }

        // Token: 0x06000012 RID: 18 RVA: 0x00002514 File Offset: 0x00000714
        public static void MakeBrokenLimbFilth(Pawn pawn)
        {
            bool flag = GUDUtil.HasSpecialGoreForXenoType(pawn);
            bool flag2 = flag;
            if (flag2)
            {
                GUDUtil.MakeBrokenLimbFilthForAlien(pawn);
            }
            else
            {
                GUDUtil.MakeBrokenLimbFilthForHuman(pawn);
            }
        }

        // Token: 0x06000013 RID: 19 RVA: 0x00002544 File Offset: 0x00000744
        public static void MakeBrokenLimbFilthForAlien(Pawn pawn)
        {
            ThingDef goreFilth = XenoGoreDictionary.dict[pawn.genes.Xenotype].goreFilth;
            bool flag = goreFilth == null;
            if (!flag)
            {
                FilthMaker.TryMakeFilth(pawn.PositionHeld, pawn.Map, goreFilth, pawn.LabelIndefinite(), 1, FilthSourceFlags.Pawn);
            }
        }

        // Token: 0x06000014 RID: 20 RVA: 0x00002592 File Offset: 0x00000792
        public static void MakeBrokenLimbFilthForHuman(Pawn pawn)
        {
            FilthMaker.TryMakeFilth(CellFinder.RandomClosewalkCellNear(pawn.Position, pawn.Map, 5, null), pawn.Map, GoreDefOf.GoreFilth, pawn.LabelIndefinite(), 1, FilthSourceFlags.Pawn);
        }

        // Token: 0x06000015 RID: 21 RVA: 0x000025C4 File Offset: 0x000007C4
        [DebugAction("GUD", "MakeFlyingHead", false, false, false, false, false, 0, false, actionType = DebugActionType.ToolMapForPawns)]
        public static void MakeFlyingHeadFor(Pawn pawn)
        {
            IntRange intRange = new IntRange(3, 5);
            int randomInRange = intRange.RandomInRange;
            IntVec3 intVec;
            bool flag = !CellFinder.TryFindRandomCellNear(pawn.Position, pawn.Map, randomInRange, (IntVec3 x) => (x - pawn.Position).LengthHorizontalSquared >= 3, out intVec, -1);
            if (!flag)
            {
                LocalTargetInfo localTargetInfo = new LocalTargetInfo(intVec);
                Projectile_FlyingHead projectile_FlyingHead = (Projectile_FlyingHead)GenSpawn.Spawn(GoreDefOf.FlyingHead, pawn.Position, pawn.Map, WipeMode.Vanish);
                projectile_FlyingHead.gender = pawn.gender;
                projectile_FlyingHead.skinColor = pawn.story.SkinColor;
                projectile_FlyingHead.headMap = pawn.Map;
                projectile_FlyingHead.pawn = pawn;
                projectile_FlyingHead.Launch(pawn, localTargetInfo, localTargetInfo, ProjectileHitFlags.None, false, null);
            }
        }

        // Token: 0x06000016 RID: 22 RVA: 0x000026B8 File Offset: 0x000008B8
        [DebugAction("GUD", "MakeGoreFleck", false, false, false, false, false, 0, false, actionType = DebugActionType.ToolMapForPawns)]
        public static void MakeGoreFleck(Pawn pawn)
        {
            bool flag = pawn == null;
            if (!flag)
            {
                Map map = pawn.Map;
                bool flag2 = map == null;
                if (!flag2)
                {
                    Vector3 vector = pawn.Position.ToVector3();
                    bool flag3 = !vector.ShouldSpawnMotesAt(map, true);
                    if (!flag3)
                    {
                        int num = Rand.Range(3, 5);
                        for (int i = 0; i < num; i++)
                        {
                            bool flag4 = map == null;
                            if (flag4)
                            {
                                return;
                            }
                            bool flag5 = GUDUtil.HasSpecialGoreForXenoType(pawn);
                            bool flag6 = flag5;
                            if (flag6)
                            {
                                GUDUtil.MakeGoreFleckForAlien(vector, map, pawn);
                            }
                            else
                            {
                                GUDUtil.MakeGoreFleckForHuman(vector, map);
                            }
                        }
                        GUDUtil.PlayGibSound(vector, map);
                    }
                }
            }
        }

        // Token: 0x06000017 RID: 23 RVA: 0x0000276C File Offset: 0x0000096C
        private static void MakeGoreFleckForAlien(Vector3 loc, Map map, Pawn pawn)
        {
            float num = Rand.Range(-0.05f, 0.05f);
            float num2 = Rand.Range(-0.05f, 0.05f);
            FleckDef gibDef = XenoGoreDictionary.dict[pawn.genes.Xenotype].gibDef;
            bool flag = gibDef == null;
            if (!flag)
            {
                FleckCreationData dataStatic = FleckMaker.GetDataStatic(loc + new Vector3(num, num2, 0f), map, gibDef, 1f);
                dataStatic.rotation = (float)Rand.Range(0, 360);
                dataStatic.velocityAngle = (float)Rand.Range(0, 360);
                dataStatic.velocitySpeed = Rand.Range(0.5f, 0.75f);
                map.flecks.CreateFleck(dataStatic);
            }
        }

        // Token: 0x06000018 RID: 24 RVA: 0x0000282C File Offset: 0x00000A2C
        private static void MakeGoreFleckForHuman(Vector3 loc, Map map)
        {
            float num = Rand.Range(-0.05f, 0.05f);
            float num2 = Rand.Range(-0.05f, 0.05f);
            FleckCreationData dataStatic = FleckMaker.GetDataStatic(loc + new Vector3(num, num2, 0f), map, GoreDefOf.FlyingGibs, 1f);
            dataStatic.rotation = (float)Rand.Range(0, 360);
            dataStatic.velocityAngle = (float)Rand.Range(0, 360);
            dataStatic.velocitySpeed = Rand.Range(0.5f, 0.75f);
            map.flecks.CreateFleck(dataStatic);
        }

        // Token: 0x06000019 RID: 25 RVA: 0x000028C8 File Offset: 0x00000AC8
        private static void PlayGibSound(Vector3 loc, Map map)
        {
            SoundDef gibSound = GoreDefOf.GibSound;
            SoundInfo soundInfo = SoundInfo.InMap(new TargetInfo(loc.ToIntVec3(), map, false), MaintenanceType.None);
            gibSound.PlayOneShot(soundInfo);
        }

   
    }
}
